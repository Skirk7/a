import numpy as np
import pandas as pd
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import mean_absolute_error, mean_squared_error, confusion_matrix
import matplotlib.pyplot as plt
import seaborn as sns

iris = load_iris()
df = pd.DataFrame(data=np.c_[iris.data, iris.target], columns=iris.feature_names + ['target'])

# Regression
Xr, yr = df[['sepal length (cm)']], df['sepal width (cm)']
Xr_train, Xr_test, yr_train, yr_test = train_test_split(Xr, yr, test_size=0.2, random_state=42)
reg = LinearRegression().fit(Xr_train, yr_train)
yr_pred = reg.predict(Xr_test)
mae = mean_absolute_error(yr_test, yr_pred)
rmse = np.sqrt(mean_squared_error(yr_test, yr_pred))
mase = mae / mean_absolute_error(yr_train, reg.predict(Xr_train))
mape = np.mean(np.abs((yr_test - yr_pred) / (yr_test + 1e-10))) * 100

print("Regression:\nMAE:", mae, "\nRMSE:", rmse, "\nMAPE:", mape, "\nMASE:", mase)

# Classification
Xc, yc = df[iris.feature_names], df['target'].astype(int)
Xc_train, Xc_test, yc_train, yc_test = train_test_split(Xc, yc, test_size=0.2, random_state=42)
clf = DecisionTreeClassifier().fit(Xc_train, yc_train)
yc_pred = clf.predict(Xc_test)
cm = confusion_matrix(yc_test, yc_pred)

print("\nClassification Confusion Matrix:\n", cm)
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=iris.target_names, yticklabels=iris.target_names)
plt.xlabel('Predicted'), plt.ylabel('Actual'), plt.title('Confusion Matrix')
plt.show()
